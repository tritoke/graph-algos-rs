/*
 *  Copyright (C) 2021  Sam Leonard
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use crate::{Edge, EdgeWeight, NodeBounds};
use std::fmt;

/// Represents the predecessor map generated by various graph algorithms
pub type PredMap<'a, N> = ::std::collections::HashMap<&'a N, Edge<&'a N>>;

/// Represents a path through a graph as a start node
/// then pairs of destination node and optionally, the edge weight
#[derive(Debug, Clone)]
pub struct Path<'a, N: NodeBounds> {
    head: &'a N,
    edges: Vec<Edge<&'a N>>,
}

impl<'a, N: NodeBounds> Path<'a, N> {
    /// Returns a reference to the head node in the path
    /// ```
    /// use graph_algos::{Path, PredMap, Edge, EdgeWeight};
    ///
    /// // 1 -> 2 -> 3 -> 4
    /// let pred_map: PredMap<u32> = [
    ///     (&4_u32, Edge::new(&3_u32)),
    ///     (&3_u32, Edge::new(&2_u32)),
    ///     (&2_u32, Edge::new(&1_u32)),
    ///     // predecessor map must have the self link for the end node
    ///     (&1_u32, Edge::new(&1_u32)),
    /// ].iter().cloned().collect();
    ///
    /// let path = Path::new_path_to(&pred_map, &4).unwrap();
    /// assert_eq!(path.head(), &1);
    /// ```
    pub fn head(&self) -> &'a N {
        self.head
    }

    /// Returns a slice into the edges in the path
    /// ```
    /// use graph_algos::{Path, PredMap, Edge, EdgeWeight};
    ///
    /// // 1 -> 2 -> 3 -> 4
    /// let pred_map: PredMap<u32> = [
    ///     (&4_u32, Edge::new(&3_u32)),
    ///     (&3_u32, Edge::new(&2_u32)),
    ///     (&2_u32, Edge::new(&1_u32)),
    ///     // predecessor map must have the self link for the end node
    ///     (&1_u32, Edge::new(&1_u32)),
    /// ].iter().cloned().collect();
    ///
    /// let path = Path::new_path_to(&pred_map, &4).unwrap();
    ///
    /// let correct = vec![
    ///     Edge::new(&2),
    ///     Edge::new(&3),
    ///     Edge::new(&4),
    /// ];
    /// assert_eq!(path.edges(), &correct);
    /// ```
    pub fn edges(&self) -> &[Edge<&'a N>] {
        &self.edges
    }

    /// extracts a path from the predecessor map and an end node
    /// ```
    /// use graph_algos::{Path, PredMap, Edge, EdgeWeight};
    ///
    /// // 1 -> 2 -> 3 -> 4
    /// let pred_map: PredMap<u32> = [
    ///     (&4_u32, Edge::new(&3_u32)),
    ///     (&3_u32, Edge::new(&2_u32)),
    ///     (&2_u32, Edge::new(&1_u32)),
    ///     // predecessor map must have the self link for the end node
    ///     (&1_u32, Edge::new(&1_u32)),
    /// ].iter().cloned().collect();
    ///
    /// let path = Path::new_path_to(&pred_map, &4).unwrap();
    /// assert_eq!(path.head(), &1);
    ///
    /// let correct = vec![
    ///     Edge::new(&2),
    ///     Edge::new(&3),
    ///     Edge::new(&4),
    /// ];
    /// assert_eq!(path.edges(), &correct);
    /// ```
    pub fn new_path_to(
        pred_map: &'a PredMap<'a, N>,
        end_node: &'a N,
    ) -> Result<Self, &'static str> {
        let mut rev_path: Vec<Edge<&N>> = Vec::new();
        let mut next_node: &N = end_node;

        let mut head: Option<&N> = None;

        while let Some(edge) = pred_map.get(next_node) {
            if *edge.destination() != next_node {
                match edge.weight() {
                    Some(EdgeWeight::Weight(w)) => {
                        rev_path.push(Edge::new_with_weight(next_node, w));
                    }
                    Some(_) => {
                        return Err("Path not viable, edge has infinite weight.");
                    }
                    None => {
                        rev_path.push(Edge::new(next_node));
                    }
                }

                next_node = edge.destination();
            } else {
                head = Some(edge.destination());
                break;
            }
        }

        if let Some(head_node) = head {
            rev_path.reverse();

            Ok(Self {
                head: head_node,
                edges: rev_path,
            })
        } else {
            Err("no path exists to destination node.")
        }
    }
}

impl<'a, N: NodeBounds> fmt::Display for Path<'a, N> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}", self.head)?;

        for edge in self.edges.iter() {
            if let Some(w) = edge.weight() {
                write!(f, " --({})-> {:?}", w, edge.destination())?;
            } else {
                write!(f, " --> {:?}", edge.destination())?;
            }
        }

        Ok(())
    }
}
